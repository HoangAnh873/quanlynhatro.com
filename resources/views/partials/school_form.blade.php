<div class="form-group">
    <label>T√™n Tr∆∞·ªùng</label>
    <input type="text" name="name" class="form-control" value="{{ old('name', isset($school) ? $school->name : '') }}" required>
</div>

<div class="form-group">
    <label>Icon ƒê·∫°i Di·ªán</label>
    <input type="file" name="icon" class="form-control">
    @if (isset($school) && $school->icon)
        <p>Icon hi·ªán t·∫°i:</p>
        <img src="{{ asset('img/icons/' . $school->icon) }}" alt="icon" width="50">
    @endif
</div>

<div class="form-group">
    <label>ƒê·ªãa Ch·ªâ</label>
    <input type="text" id="location" name="location" class="form-control" value="{{ old('location', isset($school) ? $school->location : '') }}" onblur="getCoordinates()">
</div>

<div class="form-group">
    <label>Vƒ© ƒê·ªô</label>
    <input type="text" id="GPS_Latitude" name="GPS_Latitude" class="form-control" value="{{ old('GPS_Latitude', isset($school) ? $school->GPS_Latitude : '') }}" readonly>
</div>

<div class="form-group">
    <label>Kinh ƒê·ªô</label>
    <input type="text" id="GPS_Longitude" name="GPS_Longitude" class="form-control" value="{{ old('GPS_Longitude', isset($school) ? $school->GPS_Longitude : '') }}" readonly>
</div>


<div id="address_details"></div>

{{-- Nh√∫ng Google Maps API --}}
<script>
    function getCoordinates() {
        let address = document.getElementById('location').value.trim();
        let latInput = document.getElementById('GPS_Latitude');
        let lonInput = document.getElementById('GPS_Longitude');
        let detailsDiv = document.getElementById('address_details');
        
        // X√≥a d·ªØ li·ªáu c≈©
        latInput.value = "";
        lonInput.value = "";
        if (detailsDiv) detailsDiv.innerHTML = "";
        
        if (!address) {
            alert("Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ!");
            return;
        }
        
        // L∆∞u l·∫°i ƒë·ªãa ch·ªâ g·ªëc ng∆∞·ªùi d√πng nh·∫≠p
        const originalAddress = address;
        
        // ƒê·∫£m b·∫£o ƒë·ªãa ch·ªâ c√≥ ch·ª©a "C·∫ßn Th∆°"
        if (!address.toLowerCase().includes("c·∫ßn th∆°")) {
            address += ", C·∫ßn Th∆°";
        }
        
        // Th√™m tham s·ªë chi ti·∫øt v√† gi·∫£m m·ª©c ƒë·ªô m·ªù trong t√¨m ki·∫øm
        let url = `https://nominatim.openstreetmap.org/search?format=json&countrycodes=VN&addressdetails=1&limit=5&dedupe=1&q=${encodeURIComponent(address)}`;
        
        // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t√¨m ki·∫øm
        if (!detailsDiv) {
            detailsDiv = document.createElement('div');
            detailsDiv.id = 'address_details';
            document.getElementById('location').parentNode.appendChild(detailsDiv);
        }
        detailsDiv.innerHTML = '<p>ƒêang t√¨m ki·∫øm ƒë·ªãa ch·ªâ...</p>';
        
        fetch(url, { 
            headers: { 
                'User-Agent': 'YourAppName/1.0', 
                'Accept-Language': 'vi' 
            } 
        })
        .then(response => response.json())
        .then(data => {
            console.log("üìå API Response:", data);
            
            if (data.length > 0) {
                // T√¨m k·∫øt qu·∫£ ph√π h·ª£p nh·∫•t
                let bestMatch = findBestMatch(data, originalAddress);
                
                // G√°n t·ªça ƒë·ªô t√¨m ƒë∆∞·ª£c
                latInput.value = bestMatch.lat;
                lonInput.value = bestMatch.lon;
                
                // Hi·ªÉn th·ªã th√¥ng tin ƒë·ªãa ch·ªâ chi ti·∫øt
                const addressDetails = bestMatch.address;
                let detailsHTML = '<h4>Th√¥ng tin ƒë·ªãa ch·ªâ chi ti·∫øt:</h4>';
                
                // Hi·ªÉn th·ªã so s√°nh ƒë·ªãa ch·ªâ
                detailsHTML += `
                    <div style="margin-bottom: 10px; padding: 8px; background-color: #f8f9fa; border-radius: 4px;">
                        <strong>ƒê·ªãa ch·ªâ nh·∫≠p v√†o:</strong> ${originalAddress}<br>
                        <strong>ƒê·ªãa ch·ªâ t√¨m th·∫•y:</strong> ${bestMatch.display_name}
                    </div>
                `;
                
                // Hi·ªÉn th·ªã b·∫£ng th√¥ng tin chi ti·∫øt
                detailsHTML += '<table style="width:100%; border-collapse:collapse;">';
                let hasDetails = false;
                
                const fieldLabels = {
                    house_number: 'S·ªë nh√†',
                    road: 'ƒê∆∞·ªùng',
                    neighbourhood: 'Khu v·ª±c/X√≥m',
                    suburb: 'Ph∆∞·ªùng/X√£',
                    city_district: 'Qu·∫≠n/Huy·ªán',
                    city: 'Th√†nh ph·ªë',
                    state: 'T·ªânh',
                    postcode: 'M√£ b∆∞u ch√≠nh',
                    country: 'Qu·ªëc gia'
                };
                
                for (const [key, label] of Object.entries(fieldLabels)) {
                    if (addressDetails[key]) {
                        detailsHTML += `<tr>
                            <td style="border:1px solid #ddd; padding:8px; font-weight:bold;">${label}</td>
                            <td style="border:1px solid #ddd; padding:8px;">${addressDetails[key]}</td>
                        </tr>`;
                        hasDetails = true;
                    }
                }
                detailsHTML += '</table>';
                
                // Th√™m link xem tr√™n b·∫£n ƒë·ªì
                detailsHTML += `
                    <div style="margin-top: 15px;">
                        <a href="https://www.openstreetmap.org/?mlat=${bestMatch.lat}&mlon=${bestMatch.lon}&zoom=16" 
                        target="_blank" style="display: inline-block; padding: 5px 10px; background-color: #4285f4; 
                        color: white; text-decoration: none; border-radius: 4px;">
                        üîç Xem tr√™n b·∫£n ƒë·ªì
                        </a>
                    </div>
                `;
                
                detailsDiv.innerHTML = hasDetails ? detailsHTML : '<p>Kh√¥ng t√¨m th·∫•y th√¥ng tin chi ti·∫øt.</p>';
            } else {
                detailsDiv.innerHTML = '<p style="color: red;">‚ùå Kh√¥ng t√¨m th·∫•y t·ªça ƒë·ªô! H√£y nh·∫≠p ƒë·ªãa ch·ªâ r√µ h∆°n.</p>';
            }
        })
        .catch(error => {
            console.error("‚ùå L·ªói l·∫•y t·ªça ƒë·ªô:", error);
            detailsDiv.innerHTML = `<p style="color: red;">‚ö†Ô∏è L·ªói khi l·∫•y d·ªØ li·ªáu: ${error.message}</p>`;
        });
    }

    // H√†m t√¨m k·∫øt qu·∫£ ph√π h·ª£p nh·∫•t v·ªõi ƒë·ªãa ch·ªâ ng∆∞·ªùi d√πng nh·∫≠p
    function findBestMatch(locations, originalAddress) {
        if (locations.length === 1) return locations[0];
        
        // Chuy·ªÉn ƒë·ªãa ch·ªâ g·ªëc th√†nh ch·ªØ th∆∞·ªùng v√† lo·∫°i b·ªè d·∫•u ƒë·ªÉ so s√°nh
        const normalizedOriginal = normalizeVietnamese(originalAddress.toLowerCase());
        
        // T√≠nh ƒëi·ªÉm t∆∞∆°ng ƒë·ªìng cho m·ªói k·∫øt qu·∫£
        const scoredLocations = locations.map(location => {
            const displayName = location.display_name.toLowerCase();
            const normalizedDisplay = normalizeVietnamese(displayName);
            
            // T√≠nh ƒëi·ªÉm d·ª±a tr√™n m·ª©c ƒë·ªô t∆∞∆°ng ƒë·ªìng v√† ƒë·∫ßy ƒë·ªß th√¥ng tin
            let score = 0;
            
            // Ki·ªÉm tra t·ª´ng ph·∫ßn c·ªßa ƒë·ªãa ch·ªâ g·ªëc c√≥ xu·∫•t hi·ªán trong k·∫øt qu·∫£ kh√¥ng
            const originalParts = normalizedOriginal.split(/[,\s]+/).filter(part => part.length > 2);
            originalParts.forEach(part => {
                if (normalizedDisplay.includes(part)) {
                    score += 10;
                }
            });
            
            // ∆Øu ti√™n c√°c ƒë·ªãa ch·ªâ c√≥ ƒë·ªß th√¥ng tin chi ti·∫øt
            const addressDetail = location.address;
            ['road', 'suburb', 'city_district'].forEach(field => {
                if (addressDetail[field]) score += 5;
            });
            
            // ∆Øu ti√™n c√°c k·∫øt qu·∫£ c√≥ importance cao h∆°n (tr∆∞·ªùng c·ªßa Nominatim)
            if (location.importance) {
                score += location.importance * 20;
            }
            
            return { location, score };
        });
        
        // S·∫Øp x·∫øp theo ƒëi·ªÉm v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ t·ªët nh·∫•t
        scoredLocations.sort((a, b) => b.score - a.score);
        console.log("üìä Scored Locations:", scoredLocations);
        
        return scoredLocations[0].location;
    }

    // H√†m chu·∫©n h√≥a ti·∫øng Vi·ªát (b·ªè d·∫•u) ƒë·ªÉ so s√°nh t·ªët h∆°n
    function normalizeVietnamese(str) {
        return str.normalize('NFD')
                .replace(/[\u0300-\u036f]/g, '')
                .replace(/ƒë/g, 'd').replace(/ƒê/g, 'D');
    }

    // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn ƒë·ªãa ƒëi·ªÉm thay th·∫ø
    function selectAlternativeLocation(index) {
        if (!index || !window.allLocations) return;
        
        const selectedLocation = window.allLocations[index];
        if (!selectedLocation) return;
        
        // C·∫≠p nh·∫≠t t·ªça ƒë·ªô
        document.getElementById('GPS_Latitude').value = selectedLocation.lat;
        document.getElementById('GPS_Longitude').value = selectedLocation.lon;
        
        // C·∫≠p nh·∫≠t th√¥ng tin chi ti·∫øt
        const detailsDiv = document.getElementById('address_details');
        if (detailsDiv) {
            // G·ªçi l·∫°i h√†m ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin c·ªßa ƒë·ªãa ƒëi·ªÉm ƒë∆∞·ª£c ch·ªçn
            // Ho·∫∑c c√≥ th·ªÉ vi·∫øt l·∫°i logic hi·ªÉn th·ªã ·ªü ƒë√¢y
            getCoordinates();
        }
    }

</script>